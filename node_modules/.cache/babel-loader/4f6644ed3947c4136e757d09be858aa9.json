{"ast":null,"code":"import { has, timer } from \"../../../utils/utils\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar PerformanceTracer = /** @class */function () {\n  function PerformanceTracer() {}\n  PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n    if (has(config, \"traceInitPerf\")) {\n      var userTraceInitPerf = config.traceInitPerf;\n      var traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf;\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n    this.traceInitIndent = -1;\n  };\n  PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n      var _a = timer(phaseImpl),\n        time = _a.time,\n        value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      var traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n  return PerformanceTracer;\n}();\nexport { PerformanceTracer };","map":{"version":3,"names":["has","timer","DEFAULT_PARSER_CONFIG","PerformanceTracer","prototype","initPerformanceTracer","config","userTraceInitPerf","traceInitPerf","traceIsNumber","traceInitMaxIdent","Infinity","traceInitIndent","TRACE_INIT","phaseDesc","phaseImpl","indent","Array","join","console","log","_a","time","value","traceMethod","warn"],"sources":["/home/spencer/Personal/Bibtex-web-database-master/client/node_modules/chevrotain/lib_esm/src/parse/parser/traits/perf_tracer.js"],"sourcesContent":["import { has, timer } from \"../../../utils/utils\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar PerformanceTracer = /** @class */ (function () {\n    function PerformanceTracer() {\n    }\n    PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n        if (has(config, \"traceInitPerf\")) {\n            var userTraceInitPerf = config.traceInitPerf;\n            var traceIsNumber = typeof userTraceInitPerf === \"number\";\n            this.traceInitMaxIdent = traceIsNumber\n                ? userTraceInitPerf\n                : Infinity;\n            this.traceInitPerf = traceIsNumber\n                ? userTraceInitPerf > 0\n                : userTraceInitPerf;\n        }\n        else {\n            this.traceInitMaxIdent = 0;\n            this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n        }\n        this.traceInitIndent = -1;\n    };\n    PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(indent + \"--> <\" + phaseDesc + \">\");\n            }\n            var _a = timer(phaseImpl), time = _a.time, value = _a.value;\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            var traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    };\n    return PerformanceTracer;\n}());\nexport { PerformanceTracer };\n//# sourceMappingURL=perf_tracer.js.map"],"mappings":"AAAA,SAASA,GAAG,EAAEC,KAAK,QAAQ,sBAAsB;AACjD,SAASC,qBAAqB,QAAQ,WAAW;AACjD;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,aAAe,YAAY;EAC/C,SAASA,iBAAiB,GAAG,CAC7B;EACAA,iBAAiB,CAACC,SAAS,CAACC,qBAAqB,GAAG,UAAUC,MAAM,EAAE;IAClE,IAAIN,GAAG,CAACM,MAAM,EAAE,eAAe,CAAC,EAAE;MAC9B,IAAIC,iBAAiB,GAAGD,MAAM,CAACE,aAAa;MAC5C,IAAIC,aAAa,GAAG,OAAOF,iBAAiB,KAAK,QAAQ;MACzD,IAAI,CAACG,iBAAiB,GAAGD,aAAa,GAChCF,iBAAiB,GACjBI,QAAQ;MACd,IAAI,CAACH,aAAa,GAAGC,aAAa,GAC5BF,iBAAiB,GAAG,CAAC,GACrBA,iBAAiB;IAC3B,CAAC,MACI;MACD,IAAI,CAACG,iBAAiB,GAAG,CAAC;MAC1B,IAAI,CAACF,aAAa,GAAGN,qBAAqB,CAACM,aAAa;IAC5D;IACA,IAAI,CAACI,eAAe,GAAG,CAAC,CAAC;EAC7B,CAAC;EACDT,iBAAiB,CAACC,SAAS,CAACS,UAAU,GAAG,UAAUC,SAAS,EAAEC,SAAS,EAAE;IACrE;IACA;IACA,IAAI,IAAI,CAACP,aAAa,KAAK,IAAI,EAAE;MAC7B,IAAI,CAACI,eAAe,EAAE;MACtB,IAAII,MAAM,GAAG,IAAIC,KAAK,CAAC,IAAI,CAACL,eAAe,GAAG,CAAC,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC;MAC3D,IAAI,IAAI,CAACN,eAAe,GAAG,IAAI,CAACF,iBAAiB,EAAE;QAC/CS,OAAO,CAACC,GAAG,CAACJ,MAAM,GAAG,OAAO,GAAGF,SAAS,GAAG,GAAG,CAAC;MACnD;MACA,IAAIO,EAAE,GAAGpB,KAAK,CAACc,SAAS,CAAC;QAAEO,IAAI,GAAGD,EAAE,CAACC,IAAI;QAAEC,KAAK,GAAGF,EAAE,CAACE,KAAK;MAC3D;MACA,IAAIC,WAAW,GAAGF,IAAI,GAAG,EAAE,GAAGH,OAAO,CAACM,IAAI,GAAGN,OAAO,CAACC,GAAG;MACxD,IAAI,IAAI,CAACR,eAAe,GAAG,IAAI,CAACF,iBAAiB,EAAE;QAC/Cc,WAAW,CAACR,MAAM,GAAG,OAAO,GAAGF,SAAS,GAAG,UAAU,GAAGQ,IAAI,GAAG,IAAI,CAAC;MACxE;MACA,IAAI,CAACV,eAAe,EAAE;MACtB,OAAOW,KAAK;IAChB,CAAC,MACI;MACD,OAAOR,SAAS,EAAE;IACtB;EACJ,CAAC;EACD,OAAOZ,iBAAiB;AAC5B,CAAC,EAAG;AACJ,SAASA,iBAAiB"},"metadata":{},"sourceType":"module"}