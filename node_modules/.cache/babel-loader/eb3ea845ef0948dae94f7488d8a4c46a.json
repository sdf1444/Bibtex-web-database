{"ast":null,"code":"import { EarlyExitException, isRecognitionException, NoViableAltException } from \"../../exceptions_public\";\nimport { cloneArr, defaults } from \"../../../utils/utils\";\nimport { getLookaheadPathsForOptionalProd, getLookaheadPathsForOr } from \"../../grammar/lookahead\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar ErrorHandler = /** @class */function () {\n  function ErrorHandler() {}\n  ErrorHandler.prototype.initErrorHandler = function (config) {\n    this._errors = [];\n    this.errorMessageProvider = defaults(config.errorMessageProvider, DEFAULT_PARSER_CONFIG.errorMessageProvider);\n  };\n  ErrorHandler.prototype.SAVE_ERROR = function (error) {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: cloneArr(this.RULE_OCCURRENCE_STACK)\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\"Trying to save an Error which is not a RecognitionException\");\n    }\n  };\n  Object.defineProperty(ErrorHandler.prototype, \"errors\", {\n    // TODO: extract these methods to ErrorHandler Trait?\n    get: function get() {\n      return cloneArr(this._errors);\n    },\n    set: function set(newErrors) {\n      this._errors = newErrors;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  // TODO: consider caching the error message computed information\n  ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    var lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n    var insideProdPaths = lookAheadPathsPerAlternative[0];\n    var actualTokens = [];\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    var msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName\n    });\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  };\n  // TODO: consider caching the error message computed information\n  ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    var lookAheadPathsPerAlternative = getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n    var actualTokens = [];\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    var previousToken = this.LA(0);\n    var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName()\n    });\n    throw this.SAVE_ERROR(new NoViableAltException(errMsg, this.LA(1), previousToken));\n  };\n  return ErrorHandler;\n}();\nexport { ErrorHandler };","map":{"version":3,"names":["EarlyExitException","isRecognitionException","NoViableAltException","cloneArr","defaults","getLookaheadPathsForOptionalProd","getLookaheadPathsForOr","DEFAULT_PARSER_CONFIG","ErrorHandler","prototype","initErrorHandler","config","_errors","errorMessageProvider","SAVE_ERROR","error","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","push","Error","Object","defineProperty","get","set","newErrors","enumerable","configurable","raiseEarlyExitException","occurrence","prodType","userDefinedErrMsg","ruleName","getCurrRuleFullName","ruleGrammar","getGAstProductions","lookAheadPathsPerAlternative","maxLookahead","insideProdPaths","actualTokens","i","LA","msg","buildEarlyExitMessage","expectedIterationPaths","actual","previous","customUserDescription","raiseNoAltException","errMsgTypes","previousToken","errMsg","buildNoViableAltMessage","expectedPathsPerAlt"],"sources":["/home/spencer/Personal/Bibtex-web-database-master/client/node_modules/chevrotain/lib_esm/src/parse/parser/traits/error_handler.js"],"sourcesContent":["import { EarlyExitException, isRecognitionException, NoViableAltException } from \"../../exceptions_public\";\nimport { cloneArr, defaults } from \"../../../utils/utils\";\nimport { getLookaheadPathsForOptionalProd, getLookaheadPathsForOr } from \"../../grammar/lookahead\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar ErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n    }\n    ErrorHandler.prototype.initErrorHandler = function (config) {\n        this._errors = [];\n        this.errorMessageProvider = defaults(config.errorMessageProvider, DEFAULT_PARSER_CONFIG.errorMessageProvider);\n    };\n    ErrorHandler.prototype.SAVE_ERROR = function (error) {\n        if (isRecognitionException(error)) {\n            error.context = {\n                ruleStack: this.getHumanReadableRuleStack(),\n                ruleOccurrenceStack: cloneArr(this.RULE_OCCURRENCE_STACK)\n            };\n            this._errors.push(error);\n            return error;\n        }\n        else {\n            throw Error(\"Trying to save an Error which is not a RecognitionException\");\n        }\n    };\n    Object.defineProperty(ErrorHandler.prototype, \"errors\", {\n        // TODO: extract these methods to ErrorHandler Trait?\n        get: function () {\n            return cloneArr(this._errors);\n        },\n        set: function (newErrors) {\n            this._errors = newErrors;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // TODO: consider caching the error message computed information\n    ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\n        var ruleName = this.getCurrRuleFullName();\n        var ruleGrammar = this.getGAstProductions()[ruleName];\n        var lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n        var insideProdPaths = lookAheadPathsPerAlternative[0];\n        var actualTokens = [];\n        for (var i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        var msg = this.errorMessageProvider.buildEarlyExitMessage({\n            expectedIterationPaths: insideProdPaths,\n            actual: actualTokens,\n            previous: this.LA(0),\n            customUserDescription: userDefinedErrMsg,\n            ruleName: ruleName\n        });\n        throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n    };\n    // TODO: consider caching the error message computed information\n    ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\n        var ruleName = this.getCurrRuleFullName();\n        var ruleGrammar = this.getGAstProductions()[ruleName];\n        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n        var lookAheadPathsPerAlternative = getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n        var actualTokens = [];\n        for (var i = 1; i <= this.maxLookahead; i++) {\n            actualTokens.push(this.LA(i));\n        }\n        var previousToken = this.LA(0);\n        var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n            expectedPathsPerAlt: lookAheadPathsPerAlternative,\n            actual: actualTokens,\n            previous: previousToken,\n            customUserDescription: errMsgTypes,\n            ruleName: this.getCurrRuleFullName()\n        });\n        throw this.SAVE_ERROR(new NoViableAltException(errMsg, this.LA(1), previousToken));\n    };\n    return ErrorHandler;\n}());\nexport { ErrorHandler };\n//# sourceMappingURL=error_handler.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module"}