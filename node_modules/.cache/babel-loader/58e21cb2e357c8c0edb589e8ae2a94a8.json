{"ast":null,"code":"var _require = require('./utilities/validation'),\n  isValidJSON = _require.isValidJSON;\nvar _require2 = require('./parsers/bibtexParsers'),\n  parseBibtex = _require2.parseBibtex,\n  parseToBibtex = _require2.parseToBibtex;\n\n/**\n * @function - Converts JSON to BibTeX\n * @param {string} content\n * @returns {Promise}\n */\n\nvar jsonToBibtex = function jsonToBibtex(data, property) {\n  return new Promise(function (resolve, reject) {\n    var valid = isValidJSON(data.toString());\n    if (valid) {\n      var parsedData = parseToBibtex(data.toString(), property);\n      resolve(parsedData);\n    } else {\n      var invalid = new Error('Invalid JSON');\n      reject(invalid.message);\n    }\n  });\n};\n\n/**\n * @function - Converts BibTeX to JSON\n * @param {string} content\n * @returns {Promise}\n */\n\nvar bibtexToJSON = function bibtexToJSON(content) {\n  return new Promise(function (resolve, reject) {\n    if (content) {\n      var parsedData = parseBibtex(content);\n      resolve(parsedData);\n    } else {\n      var error = new Error('Data passed in is invalid');\n      reject(error.message);\n    }\n  });\n};\nmodule.exports = {\n  bibtexToJSON: bibtexToJSON,\n  jsonToBibtex: jsonToBibtex\n};","map":{"version":3,"names":["require","isValidJSON","parseBibtex","parseToBibtex","jsonToBibtex","data","property","Promise","resolve","reject","valid","toString","parsedData","invalid","Error","message","bibtexToJSON","content","error","module","exports"],"sources":["/home/spencer/Personal/Bibtex-web-database-master/client/node_modules/@devisle/reference-js/index.js"],"sourcesContent":["const { isValidJSON } = require('./utilities/validation');\nconst { parseBibtex, parseToBibtex } = require('./parsers/bibtexParsers');\n\n/**\n * @function - Converts JSON to BibTeX\n * @param {string} content\n * @returns {Promise}\n */\n\nconst jsonToBibtex = (data, property) => new Promise((resolve, reject) => {\n  const valid = isValidJSON(data.toString());\n  if (valid) {\n    const parsedData = parseToBibtex(data.toString(), property);\n    resolve(parsedData);\n  } else {\n    const invalid = new Error('Invalid JSON');\n    reject(invalid.message);\n  }\n});\n\n/**\n * @function - Converts BibTeX to JSON\n * @param {string} content\n * @returns {Promise}\n */\n\nconst bibtexToJSON = (content) => new Promise((resolve, reject) => {\n  if (content) {\n    const parsedData = parseBibtex(content);\n    resolve(parsedData);\n  } else {\n    const error = new Error('Data passed in is invalid');\n    reject(error.message);\n  }\n});\n\nmodule.exports = {\n  bibtexToJSON,\n  jsonToBibtex,\n};\n"],"mappings":"AAAA,eAAwBA,OAAO,CAAC,wBAAwB,CAAC;EAAjDC,WAAW,YAAXA,WAAW;AACnB,gBAAuCD,OAAO,CAAC,yBAAyB,CAAC;EAAjEE,WAAW,aAAXA,WAAW;EAAEC,aAAa,aAAbA,aAAa;;AAElC;AACA;AACA;AACA;AACA;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,IAAI,EAAEC,QAAQ;EAAA,OAAK,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IACxE,IAAMC,KAAK,GAAGT,WAAW,CAACI,IAAI,CAACM,QAAQ,EAAE,CAAC;IAC1C,IAAID,KAAK,EAAE;MACT,IAAME,UAAU,GAAGT,aAAa,CAACE,IAAI,CAACM,QAAQ,EAAE,EAAEL,QAAQ,CAAC;MAC3DE,OAAO,CAACI,UAAU,CAAC;IACrB,CAAC,MAAM;MACL,IAAMC,OAAO,GAAG,IAAIC,KAAK,CAAC,cAAc,CAAC;MACzCL,MAAM,CAACI,OAAO,CAACE,OAAO,CAAC;IACzB;EACF,CAAC,CAAC;AAAA;;AAEF;AACA;AACA;AACA;AACA;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,OAAO;EAAA,OAAK,IAAIV,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IACjE,IAAIQ,OAAO,EAAE;MACX,IAAML,UAAU,GAAGV,WAAW,CAACe,OAAO,CAAC;MACvCT,OAAO,CAACI,UAAU,CAAC;IACrB,CAAC,MAAM;MACL,IAAMM,KAAK,GAAG,IAAIJ,KAAK,CAAC,2BAA2B,CAAC;MACpDL,MAAM,CAACS,KAAK,CAACH,OAAO,CAAC;IACvB;EACF,CAAC,CAAC;AAAA;AAEFI,MAAM,CAACC,OAAO,GAAG;EACfJ,YAAY,EAAZA,YAAY;EACZZ,YAAY,EAAZA;AACF,CAAC"},"metadata":{},"sourceType":"script"}