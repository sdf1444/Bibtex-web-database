{"ast":null,"code":"import { compact, contains, forEach, isArray, isEmpty, isFunction, isUndefined, keys, map } from \"../../utils/utils\";\nimport { defineNameProp, functionName } from \"../../lang/lang_extensions\";\nimport { validTermsPattern } from \"../grammar/checks\";\nexport function defaultVisit(ctx, param) {\n  var childrenNames = keys(ctx);\n  var childrenNamesLength = childrenNames.length;\n  for (var i = 0; i < childrenNamesLength; i++) {\n    var currChildName = childrenNames[i];\n    var currChildArray = ctx[currChildName];\n    var currChildArrayLength = currChildArray.length;\n    for (var j = 0; j < currChildArrayLength; j++) {\n      var currChild = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        if (currChild.fullName !== undefined) {\n          this[currChild.fullName](currChild.children, param);\n        } else {\n          this[currChild.name](currChild.children, param);\n        }\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n  return undefined;\n}\nexport function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n  var derivedConstructor = function derivedConstructor() {};\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n  var semanticProto = {\n    visit: function visit(cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n      if (cstNode.fullName !== undefined) {\n        return this[cstNode.fullName](cstNode.children, param);\n      } else {\n        return this[cstNode.name](cstNode.children, param);\n      }\n    },\n    validateVisitor: function validateVisitor() {\n      var semanticDefinitionErrors = _validateVisitor(this, ruleNames);\n      if (!isEmpty(semanticDefinitionErrors)) {\n        var errorMessages = map(semanticDefinitionErrors, function (currDefError) {\n          return currDefError.msg;\n        });\n        throw Error(\"Errors Detected in CST Visitor <\" + functionName(this.constructor) + \">:\\n\\t\" + (\"\" + errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n      }\n    }\n  };\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  derivedConstructor._RULE_NAMES = ruleNames;\n  return derivedConstructor;\n}\nexport function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n  var derivedConstructor = function derivedConstructor() {};\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n  var withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, function (ruleName) {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  return derivedConstructor;\n}\nexport var CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\nfunction _validateVisitor(visitorInstance, ruleNames) {\n  var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n  var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n  return missingErrors.concat(redundantErrors);\n}\nexport { _validateVisitor as validateVisitor };\nexport function validateMissingCstMethods(visitorInstance, ruleNames) {\n  var errors = map(ruleNames, function (currRuleName) {\n    if (!isFunction(visitorInstance[currRuleName])) {\n      return {\n        msg: \"Missing visitor method: <\" + currRuleName + \"> on \" + functionName(visitorInstance.constructor) + \" CST Visitor.\",\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      };\n    }\n  });\n  return compact(errors);\n}\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\nexport function validateRedundantMethods(visitorInstance, ruleNames) {\n  var errors = [];\n  for (var prop in visitorInstance) {\n    if (validTermsPattern.test(prop) && isFunction(visitorInstance[prop]) && !contains(VALID_PROP_NAMES, prop) && !contains(ruleNames, prop)) {\n      errors.push({\n        msg: \"Redundant visitor method: <\" + prop + \"> on \" + functionName(visitorInstance.constructor) + \" CST Visitor\\n\" + \"There is no Grammar Rule corresponding to this method's name.\\n\" + (\"For utility methods on visitor classes use methods names that do not match /\" + validTermsPattern.source + \"/.\"),\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      });\n    }\n  }\n  return errors;\n}","map":{"version":3,"names":["compact","contains","forEach","isArray","isEmpty","isFunction","isUndefined","keys","map","defineNameProp","functionName","validTermsPattern","defaultVisit","ctx","param","childrenNames","childrenNamesLength","length","i","currChildName","currChildArray","currChildArrayLength","j","currChild","tokenTypeIdx","undefined","fullName","children","name","createBaseSemanticVisitorConstructor","grammarName","ruleNames","derivedConstructor","semanticProto","visit","cstNode","validateVisitor","semanticDefinitionErrors","errorMessages","currDefError","msg","Error","constructor","join","replace","prototype","_RULE_NAMES","createBaseVisitorConstructorWithDefaults","baseConstructor","withDefaultsProto","Object","create","ruleName","CstVisitorDefinitionError","visitorInstance","missingErrors","validateMissingCstMethods","redundantErrors","validateRedundantMethods","concat","errors","currRuleName","type","MISSING_METHOD","methodName","VALID_PROP_NAMES","prop","test","push","source","REDUNDANT_METHOD"],"sources":["/home/spencer/Personal/Bibtex-web-database-master/client/node_modules/chevrotain/lib_esm/src/parse/cst/cst_visitor.js"],"sourcesContent":["import { compact, contains, forEach, isArray, isEmpty, isFunction, isUndefined, keys, map } from \"../../utils/utils\";\nimport { defineNameProp, functionName } from \"../../lang/lang_extensions\";\nimport { validTermsPattern } from \"../grammar/checks\";\nexport function defaultVisit(ctx, param) {\n    var childrenNames = keys(ctx);\n    var childrenNamesLength = childrenNames.length;\n    for (var i = 0; i < childrenNamesLength; i++) {\n        var currChildName = childrenNames[i];\n        var currChildArray = ctx[currChildName];\n        var currChildArrayLength = currChildArray.length;\n        for (var j = 0; j < currChildArrayLength; j++) {\n            var currChild = currChildArray[j];\n            // distinction between Tokens Children and CstNode children\n            if (currChild.tokenTypeIdx === undefined) {\n                if (currChild.fullName !== undefined) {\n                    this[currChild.fullName](currChild.children, param);\n                }\n                else {\n                    this[currChild.name](currChild.children, param);\n                }\n            }\n        }\n    }\n    // defaultVisit does not support generic out param\n    return undefined;\n}\nexport function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n    var semanticProto = {\n        visit: function (cstNode, param) {\n            // enables writing more concise visitor methods when CstNode has only a single child\n            if (isArray(cstNode)) {\n                // A CST Node's children dictionary can never have empty arrays as values\n                // If a key is defined there will be at least one element in the corresponding value array.\n                cstNode = cstNode[0];\n            }\n            // enables passing optional CstNodes concisely.\n            if (isUndefined(cstNode)) {\n                return undefined;\n            }\n            if (cstNode.fullName !== undefined) {\n                return this[cstNode.fullName](cstNode.children, param);\n            }\n            else {\n                return this[cstNode.name](cstNode.children, param);\n            }\n        },\n        validateVisitor: function () {\n            var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n            if (!isEmpty(semanticDefinitionErrors)) {\n                var errorMessages = map(semanticDefinitionErrors, function (currDefError) { return currDefError.msg; });\n                throw Error(\"Errors Detected in CST Visitor <\" + functionName(this.constructor) + \">:\\n\\t\" +\n                    (\"\" + errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n            }\n        }\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n}\nexport function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    var derivedConstructor = function () { };\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    var withDefaultsProto = Object.create(baseConstructor.prototype);\n    forEach(ruleNames, function (ruleName) {\n        withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n}\nexport var CstVisitorDefinitionError;\n(function (CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\nexport function validateVisitor(visitorInstance, ruleNames) {\n    var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n    return missingErrors.concat(redundantErrors);\n}\nexport function validateMissingCstMethods(visitorInstance, ruleNames) {\n    var errors = map(ruleNames, function (currRuleName) {\n        if (!isFunction(visitorInstance[currRuleName])) {\n            return {\n                msg: \"Missing visitor method: <\" + currRuleName + \"> on \" + functionName(visitorInstance.constructor) + \" CST Visitor.\",\n                type: CstVisitorDefinitionError.MISSING_METHOD,\n                methodName: currRuleName\n            };\n        }\n    });\n    return compact(errors);\n}\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\nexport function validateRedundantMethods(visitorInstance, ruleNames) {\n    var errors = [];\n    for (var prop in visitorInstance) {\n        if (validTermsPattern.test(prop) &&\n            isFunction(visitorInstance[prop]) &&\n            !contains(VALID_PROP_NAMES, prop) &&\n            !contains(ruleNames, prop)) {\n            errors.push({\n                msg: \"Redundant visitor method: <\" + prop + \"> on \" + functionName(visitorInstance.constructor) + \" CST Visitor\\n\" +\n                    \"There is no Grammar Rule corresponding to this method's name.\\n\" +\n                    (\"For utility methods on visitor classes use methods names that do not match /\" + validTermsPattern.source + \"/.\"),\n                type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n                methodName: prop\n            });\n        }\n    }\n    return errors;\n}\n//# sourceMappingURL=cst_visitor.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module"}