{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _isNil from \"lodash/isNil\";\nimport _get from \"lodash/get\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { createElement } from 'react';\nimport { childrenUtils, createHTMLLabel, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\nimport Label from '../../elements/Label';\nimport Checkbox from '../../modules/Checkbox';\nimport Radio from '../../addons/Radio';\n/**\n * A field is a form element containing a label and an input.\n * @see Form\n * @see Button\n * @see Checkbox\n * @see Dropdown\n * @see Input\n * @see Radio\n * @see Select\n * @see Visibility\n */\n\nfunction FormField(props) {\n  var children = props.children,\n    className = props.className,\n    content = props.content,\n    control = props.control,\n    disabled = props.disabled,\n    error = props.error,\n    inline = props.inline,\n    label = props.label,\n    required = props.required,\n    type = props.type,\n    width = props.width,\n    id = props.id;\n  var classes = cx(useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(inline, 'inline'), useKeyOnly(required, 'required'), useWidthProp(width, 'wide'), 'field', className);\n  var rest = getUnhandledProps(FormField, props);\n  var ElementType = getElementType(FormField, props);\n  var errorPointing = _get(error, 'pointing', 'above');\n  var errorLabel = Label.create(error, {\n    autoGenerateKey: false,\n    defaultProps: {\n      prompt: true,\n      pointing: errorPointing,\n      id: id ? \"\".concat(id, \"-error-message\") : undefined,\n      role: 'alert',\n      'aria-atomic': true\n    }\n  });\n  var errorLabelBefore = (errorPointing === 'below' || errorPointing === 'right') && errorLabel;\n  var errorLabelAfter = (errorPointing === 'above' || errorPointing === 'left') && errorLabel; // ----------------------------------------\n  // No Control\n  // ----------------------------------------\n\n  if (_isNil(control)) {\n    if (_isNil(label)) {\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), childrenUtils.isNil(children) ? content : children);\n    }\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), errorLabelBefore, createHTMLLabel(label, {\n      autoGenerateKey: false\n    }), errorLabelAfter);\n  } // ----------------------------------------\n  // Checkbox/Radio Control\n  // ----------------------------------------\n\n  var ariaDescribedBy = id && error ? \"\".concat(id, \"-error-message\") : null;\n  var ariaAttrs = {\n    'aria-describedby': ariaDescribedBy,\n    'aria-invalid': error !== undefined ? true : undefined\n  };\n  var controlProps = _objectSpread({}, rest, {\n    content: content,\n    children: children,\n    disabled: disabled,\n    required: required,\n    type: type,\n    id: id // wrap HTML checkboxes/radios in the label\n  });\n\n  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\n    return React.createElement(ElementType, {\n      className: classes\n    }, React.createElement(\"label\", null, errorLabelBefore, createElement(control, _objectSpread({}, ariaAttrs, controlProps)), \" \", label, errorLabelAfter));\n  } // pass label prop to controls that support it\n\n  if (control === Checkbox || control === Radio) {\n    return React.createElement(ElementType, {\n      className: classes\n    }, errorLabelBefore, createElement(control, _objectSpread({}, ariaAttrs, controlProps, {\n      label: label\n    })), errorLabelAfter);\n  } // ----------------------------------------\n  // Other Control\n  // ----------------------------------------\n\n  return React.createElement(ElementType, {\n    className: classes\n  }, createHTMLLabel(label, {\n    defaultProps: {\n      htmlFor: id\n    },\n    autoGenerateKey: false\n  }), errorLabelBefore, createElement(control, _objectSpread({}, ariaAttrs, controlProps)), errorLabelAfter);\n}\nFormField.handledProps = [\"as\", \"children\", \"className\", \"content\", \"control\", \"disabled\", \"error\", \"id\", \"inline\", \"label\", \"required\", \"type\", \"width\"];\nFormField.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n  /** Primary content. */\n  children: PropTypes.node,\n  /** Additional classes. */\n  className: PropTypes.string,\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n  /**\n   * A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').\n   * Extra FormField props are passed to the control component.\n   * Mutually exclusive with children.\n   */\n  control: customPropTypes.some([PropTypes.func, PropTypes.oneOf(['button', 'input', 'select', 'textarea'])]),\n  /** Individual fields may be disabled. */\n  disabled: PropTypes.bool,\n  /** Individual fields may display an error state along with a message. */\n  error: PropTypes.oneOfType([PropTypes.bool, customPropTypes.itemShorthand]),\n  /** The id of the control */\n  id: PropTypes.string,\n  /** A field can have its label next to instead of above it. */\n  inline: PropTypes.bool,\n  // Heads Up!\n  // Do not disallow children with `label` shorthand\n  // The `control` might accept a `label` prop and `children`\n\n  /** Mutually exclusive with children. */\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),\n  /** A field can show that input is mandatory. */\n  required: PropTypes.bool,\n  /** Passed to the control component (i.e. <input type='password' />) */\n  type: customPropTypes.every([customPropTypes.demand(['control'])]),\n  /** A field can specify its width in grid columns */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default FormField;","map":{"version":3,"names":["_objectSpread","_extends","_isNil","_get","cx","PropTypes","React","createElement","childrenUtils","createHTMLLabel","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","useWidthProp","Label","Checkbox","Radio","FormField","props","children","className","content","control","disabled","error","inline","label","required","type","width","id","classes","rest","ElementType","errorPointing","errorLabel","create","autoGenerateKey","defaultProps","prompt","pointing","concat","undefined","role","errorLabelBefore","errorLabelAfter","isNil","ariaDescribedBy","ariaAttrs","controlProps","htmlFor","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","some","func","oneOf","bool","oneOfType","itemShorthand","object","every","demand","WIDTHS"],"sources":["/home/spencer/Personal/Bibtex-web-database-master/client/node_modules/semantic-ui-react/dist/es/collections/Form/FormField.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _isNil from \"lodash/isNil\";\nimport _get from \"lodash/get\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { createElement } from 'react';\nimport { childrenUtils, createHTMLLabel, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\nimport Label from '../../elements/Label';\nimport Checkbox from '../../modules/Checkbox';\nimport Radio from '../../addons/Radio';\n/**\n * A field is a form element containing a label and an input.\n * @see Form\n * @see Button\n * @see Checkbox\n * @see Dropdown\n * @see Input\n * @see Radio\n * @see Select\n * @see Visibility\n */\n\nfunction FormField(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      control = props.control,\n      disabled = props.disabled,\n      error = props.error,\n      inline = props.inline,\n      label = props.label,\n      required = props.required,\n      type = props.type,\n      width = props.width,\n      id = props.id;\n  var classes = cx(useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(inline, 'inline'), useKeyOnly(required, 'required'), useWidthProp(width, 'wide'), 'field', className);\n  var rest = getUnhandledProps(FormField, props);\n  var ElementType = getElementType(FormField, props);\n\n  var errorPointing = _get(error, 'pointing', 'above');\n\n  var errorLabel = Label.create(error, {\n    autoGenerateKey: false,\n    defaultProps: {\n      prompt: true,\n      pointing: errorPointing,\n      id: id ? \"\".concat(id, \"-error-message\") : undefined,\n      role: 'alert',\n      'aria-atomic': true\n    }\n  });\n  var errorLabelBefore = (errorPointing === 'below' || errorPointing === 'right') && errorLabel;\n  var errorLabelAfter = (errorPointing === 'above' || errorPointing === 'left') && errorLabel; // ----------------------------------------\n  // No Control\n  // ----------------------------------------\n\n  if (_isNil(control)) {\n    if (_isNil(label)) {\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), childrenUtils.isNil(children) ? content : children);\n    }\n\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), errorLabelBefore, createHTMLLabel(label, {\n      autoGenerateKey: false\n    }), errorLabelAfter);\n  } // ----------------------------------------\n  // Checkbox/Radio Control\n  // ----------------------------------------\n\n\n  var ariaDescribedBy = id && error ? \"\".concat(id, \"-error-message\") : null;\n  var ariaAttrs = {\n    'aria-describedby': ariaDescribedBy,\n    'aria-invalid': error !== undefined ? true : undefined\n  };\n\n  var controlProps = _objectSpread({}, rest, {\n    content: content,\n    children: children,\n    disabled: disabled,\n    required: required,\n    type: type,\n    id: id // wrap HTML checkboxes/radios in the label\n\n  });\n\n  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\n    return React.createElement(ElementType, {\n      className: classes\n    }, React.createElement(\"label\", null, errorLabelBefore, createElement(control, _objectSpread({}, ariaAttrs, controlProps)), \" \", label, errorLabelAfter));\n  } // pass label prop to controls that support it\n\n\n  if (control === Checkbox || control === Radio) {\n    return React.createElement(ElementType, {\n      className: classes\n    }, errorLabelBefore, createElement(control, _objectSpread({}, ariaAttrs, controlProps, {\n      label: label\n    })), errorLabelAfter);\n  } // ----------------------------------------\n  // Other Control\n  // ----------------------------------------\n\n\n  return React.createElement(ElementType, {\n    className: classes\n  }, createHTMLLabel(label, {\n    defaultProps: {\n      htmlFor: id\n    },\n    autoGenerateKey: false\n  }), errorLabelBefore, createElement(control, _objectSpread({}, ariaAttrs, controlProps)), errorLabelAfter);\n}\n\nFormField.handledProps = [\"as\", \"children\", \"className\", \"content\", \"control\", \"disabled\", \"error\", \"id\", \"inline\", \"label\", \"required\", \"type\", \"width\"];\nFormField.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /**\n   * A form control component (i.e. Dropdown) or HTML tagName (i.e. 'input').\n   * Extra FormField props are passed to the control component.\n   * Mutually exclusive with children.\n   */\n  control: customPropTypes.some([PropTypes.func, PropTypes.oneOf(['button', 'input', 'select', 'textarea'])]),\n\n  /** Individual fields may be disabled. */\n  disabled: PropTypes.bool,\n\n  /** Individual fields may display an error state along with a message. */\n  error: PropTypes.oneOfType([PropTypes.bool, customPropTypes.itemShorthand]),\n\n  /** The id of the control */\n  id: PropTypes.string,\n\n  /** A field can have its label next to instead of above it. */\n  inline: PropTypes.bool,\n  // Heads Up!\n  // Do not disallow children with `label` shorthand\n  // The `control` might accept a `label` prop and `children`\n\n  /** Mutually exclusive with children. */\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.object]),\n\n  /** A field can show that input is mandatory. */\n  required: PropTypes.bool,\n\n  /** Passed to the control component (i.e. <input type='password' />) */\n  type: customPropTypes.every([customPropTypes.demand(['control'])]),\n\n  /** A field can specify its width in grid columns */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default FormField;"],"mappings":"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"},"metadata":{},"sourceType":"module"}