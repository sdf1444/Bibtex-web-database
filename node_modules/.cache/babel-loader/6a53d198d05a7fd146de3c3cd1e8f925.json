{"ast":null,"code":"import { contains } from \"../utils/utils\";\nvar MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nvar NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nvar EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nvar NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nvar RECOGNITION_EXCEPTION_NAMES = [MISMATCHED_TOKEN_EXCEPTION, NO_VIABLE_ALT_EXCEPTION, EARLY_EXIT_EXCEPTION, NOT_ALL_INPUT_PARSED_EXCEPTION];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error) {\n  // can't do instanceof on hacked custom js exceptions\n  return contains(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nexport function MismatchedTokenException(message, token, previousToken) {\n  this.name = MISMATCHED_TOKEN_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.previousToken = previousToken;\n  this.resyncedTokens = [];\n}\n// must use the \"Error.prototype\" instead of \"new Error\"\n// because the stack trace points to where \"new Error\" was invoked\"\nMismatchedTokenException.prototype = Error.prototype;\nexport function NoViableAltException(message, token, previousToken) {\n  this.name = NO_VIABLE_ALT_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.previousToken = previousToken;\n  this.resyncedTokens = [];\n}\nNoViableAltException.prototype = Error.prototype;\nexport function NotAllInputParsedException(message, token) {\n  this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.resyncedTokens = [];\n}\nNotAllInputParsedException.prototype = Error.prototype;\nexport function EarlyExitException(message, token, previousToken) {\n  this.name = EARLY_EXIT_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.previousToken = previousToken;\n  this.resyncedTokens = [];\n}\nEarlyExitException.prototype = Error.prototype;","map":{"version":3,"names":["contains","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","Object","freeze","isRecognitionException","error","name","MismatchedTokenException","message","token","previousToken","resyncedTokens","prototype","Error","NoViableAltException","NotAllInputParsedException","EarlyExitException"],"sources":["/home/spencer/Personal/Bibtex-web-database-master/client/node_modules/chevrotain/lib_esm/src/parse/exceptions_public.js"],"sourcesContent":["import { contains } from \"../utils/utils\";\nvar MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nvar NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nvar EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nvar NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nvar RECOGNITION_EXCEPTION_NAMES = [\n    MISMATCHED_TOKEN_EXCEPTION,\n    NO_VIABLE_ALT_EXCEPTION,\n    EARLY_EXIT_EXCEPTION,\n    NOT_ALL_INPUT_PARSED_EXCEPTION\n];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error) {\n    // can't do instanceof on hacked custom js exceptions\n    return contains(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nexport function MismatchedTokenException(message, token, previousToken) {\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\n// must use the \"Error.prototype\" instead of \"new Error\"\n// because the stack trace points to where \"new Error\" was invoked\"\nMismatchedTokenException.prototype = Error.prototype;\nexport function NoViableAltException(message, token, previousToken) {\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\nNoViableAltException.prototype = Error.prototype;\nexport function NotAllInputParsedException(message, token) {\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.resyncedTokens = [];\n}\nNotAllInputParsedException.prototype = Error.prototype;\nexport function EarlyExitException(message, token, previousToken) {\n    this.name = EARLY_EXIT_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\nEarlyExitException.prototype = Error.prototype;\n//# sourceMappingURL=exceptions_public.js.map"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,IAAIC,0BAA0B,GAAG,0BAA0B;AAC3D,IAAIC,uBAAuB,GAAG,sBAAsB;AACpD,IAAIC,oBAAoB,GAAG,oBAAoB;AAC/C,IAAIC,8BAA8B,GAAG,4BAA4B;AACjE,IAAIC,2BAA2B,GAAG,CAC9BJ,0BAA0B,EAC1BC,uBAAuB,EACvBC,oBAAoB,EACpBC,8BAA8B,CACjC;AACDE,MAAM,CAACC,MAAM,CAACF,2BAA2B,CAAC;AAC1C;AACA,OAAO,SAASG,sBAAsB,CAACC,KAAK,EAAE;EAC1C;EACA,OAAOT,QAAQ,CAACK,2BAA2B,EAAEI,KAAK,CAACC,IAAI,CAAC;AAC5D;AACA,OAAO,SAASC,wBAAwB,CAACC,OAAO,EAAEC,KAAK,EAAEC,aAAa,EAAE;EACpE,IAAI,CAACJ,IAAI,GAAGT,0BAA0B;EACtC,IAAI,CAACW,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,aAAa,GAAGA,aAAa;EAClC,IAAI,CAACC,cAAc,GAAG,EAAE;AAC5B;AACA;AACA;AACAJ,wBAAwB,CAACK,SAAS,GAAGC,KAAK,CAACD,SAAS;AACpD,OAAO,SAASE,oBAAoB,CAACN,OAAO,EAAEC,KAAK,EAAEC,aAAa,EAAE;EAChE,IAAI,CAACJ,IAAI,GAAGR,uBAAuB;EACnC,IAAI,CAACU,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,aAAa,GAAGA,aAAa;EAClC,IAAI,CAACC,cAAc,GAAG,EAAE;AAC5B;AACAG,oBAAoB,CAACF,SAAS,GAAGC,KAAK,CAACD,SAAS;AAChD,OAAO,SAASG,0BAA0B,CAACP,OAAO,EAAEC,KAAK,EAAE;EACvD,IAAI,CAACH,IAAI,GAAGN,8BAA8B;EAC1C,IAAI,CAACQ,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACE,cAAc,GAAG,EAAE;AAC5B;AACAI,0BAA0B,CAACH,SAAS,GAAGC,KAAK,CAACD,SAAS;AACtD,OAAO,SAASI,kBAAkB,CAACR,OAAO,EAAEC,KAAK,EAAEC,aAAa,EAAE;EAC9D,IAAI,CAACJ,IAAI,GAAGP,oBAAoB;EAChC,IAAI,CAACS,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,aAAa,GAAGA,aAAa;EAClC,IAAI,CAACC,cAAc,GAAG,EAAE;AAC5B;AACAK,kBAAkB,CAACJ,SAAS,GAAGC,KAAK,CAACD,SAAS"},"metadata":{},"sourceType":"module"}