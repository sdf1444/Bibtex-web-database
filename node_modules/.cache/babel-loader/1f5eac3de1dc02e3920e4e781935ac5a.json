{"ast":null,"code":"/* start bibtexParse 0.0.2 */\n\n// Original work by Henrik Muehe (c) 2010\n//\n// CommonJS port by Mikola Lysenko 2013\n//\n// Port to Browser lib by ORCID / RCPETERS\n//\n// Issues:\n//  no comment handling within strings\n//  no string concatenation\n//  no variable values yet\n// Grammar implemented here:\n//  bibtex -> (string | preamble | comment | entry)*;\n//  string -> '@STRING' '{' key_equals_value '}';\n//  preamble -> '@PREAMBLE' '{' value '}';\n//  comment -> '@COMMENT' '{' value '}';\n//  entry -> '@' key '{' key ',' key_value_list '}';\n//  key_value_list -> key_equals_value (',' key_equals_value)*;\n//  key_equals_value -> key '=' value;\n//  value -> value_quotes | value_braces | key;\n//  value_quotes -> '\"' .*? '\"'; // not quite\n//  value_braces -> '{' .*? '\"'; // not quite\n(function (exports) {\n  function BibtexParser() {\n    this.pos = 0;\n    this.input = \"\";\n    this.entries = new Array();\n    this.strings = {\n      JAN: \"January\",\n      FEB: \"February\",\n      MAR: \"March\",\n      APR: \"April\",\n      MAY: \"May\",\n      JUN: \"June\",\n      JUL: \"July\",\n      AUG: \"August\",\n      SEP: \"September\",\n      OCT: \"October\",\n      NOV: \"November\",\n      DEC: \"December\"\n    };\n    this.currentEntry = \"\";\n    this.setInput = function (t) {\n      this.input = t;\n    };\n    this.getEntries = function () {\n      return this.entries;\n    };\n    this.isWhitespace = function (s) {\n      return s == ' ' || s == '\\r' || s == '\\t' || s == '\\n';\n    };\n    this.match = function (s) {\n      this.skipWhitespace();\n      if (this.input.substring(this.pos, this.pos + s.length) == s) {\n        this.pos += s.length;\n      } else {\n        throw \"Token mismatch, expected \" + s + \", found \" + this.input.substring(this.pos);\n      }\n      this.skipWhitespace();\n    };\n    this.tryMatch = function (s) {\n      this.skipWhitespace();\n      if (this.input.substring(this.pos, this.pos + s.length) == s) {\n        return true;\n      } else {\n        return false;\n      }\n      this.skipWhitespace();\n    };\n\n    /* when search for a match  all text can be ignored, not just white space */\n    this.matchAt = function () {\n      while (this.input.length > this.pos && this.input[this.pos] != '@') {\n        this.pos++;\n      }\n      if (this.input[this.pos] == '@') {\n        return true;\n      }\n      return false;\n    };\n    this.skipWhitespace = function () {\n      while (this.isWhitespace(this.input[this.pos])) {\n        this.pos++;\n      }\n      if (this.input[this.pos] == \"%\") {\n        while (this.input[this.pos] != \"\\n\") {\n          this.pos++;\n        }\n        this.skipWhitespace();\n      }\n    };\n    this.value_braces = function () {\n      var bracecount = 0;\n      this.match(\"{\");\n      var start = this.pos;\n      while (true) {\n        if (this.input[this.pos] == '}' && this.input[this.pos - 1] != '\\\\') {\n          if (bracecount > 0) {\n            bracecount--;\n          } else {\n            var end = this.pos;\n            this.match(\"}\");\n            return this.input.substring(start, end);\n          }\n        } else if (this.input[this.pos] == '{') {\n          bracecount++;\n        } else if (this.pos == this.input.length - 1) {\n          throw \"Unterminated value\";\n        }\n        this.pos++;\n      }\n    };\n    this.value_quotes = function () {\n      this.match('\"');\n      var start = this.pos;\n      while (true) {\n        if (this.input[this.pos] == '\"' && this.input[this.pos - 1] != '\\\\') {\n          var end = this.pos;\n          this.match('\"');\n          return this.input.substring(start, end);\n        } else if (this.pos == this.input.length - 1) {\n          throw \"Unterminated value:\" + this.input.substring(start);\n        }\n        this.pos++;\n      }\n    };\n    this.single_value = function () {\n      var start = this.pos;\n      if (this.tryMatch(\"{\")) {\n        return this.value_braces();\n      } else if (this.tryMatch('\"')) {\n        return this.value_quotes();\n      } else {\n        var k = this.key();\n        if (this.strings[k.toUpperCase()]) {\n          return this.strings[k];\n        } else if (k.match(\"^[0-9]+$\")) {\n          return k;\n        } else {\n          throw \"Value expected:\" + this.input.substring(start);\n        }\n      }\n    };\n    this.value = function () {\n      var values = [];\n      values.push(this.single_value());\n      while (this.tryMatch(\"#\")) {\n        this.match(\"#\");\n        values.push(this.single_value());\n      }\n      return values.join(\"\");\n    };\n    this.key = function () {\n      var start = this.pos;\n      while (true) {\n        if (this.pos == this.input.length) {\n          throw \"Runaway key\";\n        }\n        if (this.input[this.pos].match(\"[a-zA-Z0-9_:\\\\./-]\")) {\n          this.pos++;\n        } else {\n          return this.input.substring(start, this.pos).toUpperCase();\n        }\n      }\n    };\n    this.key_equals_value = function () {\n      var key = this.key();\n      if (this.tryMatch(\"=\")) {\n        this.match(\"=\");\n        var val = this.value();\n        return [key, val];\n      } else {\n        throw \"... = value expected, equals sign missing:\" + this.input.substring(this.pos);\n      }\n    };\n    this.key_value_list = function () {\n      var kv = this.key_equals_value();\n      this.currentEntry['entryTags'] = {};\n      this.currentEntry['entryTags'][kv[0]] = kv[1];\n      while (this.tryMatch(\",\")) {\n        this.match(\",\");\n        // fixes problems with commas at the end of a list\n        if (this.tryMatch(\"}\")) {\n          break;\n        }\n        kv = this.key_equals_value();\n        this.currentEntry['entryTags'][kv[0]] = kv[1];\n      }\n    };\n    this.entry_body = function (d) {\n      this.currentEntry = {};\n      this.currentEntry['citationKey'] = this.key();\n      this.currentEntry['entryType'] = d.substring(1);\n      this.match(\",\");\n      this.key_value_list();\n      this.entries.push(this.currentEntry);\n    };\n    this.directive = function () {\n      this.match(\"@\");\n      return \"@\" + this.key();\n    };\n    this.string = function () {\n      var kv = this.key_equals_value();\n      this.strings[kv[0].toUpperCase()] = kv[1];\n    };\n    this.preamble = function () {\n      this.value();\n    };\n    this.comment = function () {\n      //this.matchAt();\n      this.single_value();\n    };\n    this.entry = function (d) {\n      this.entry_body(d);\n    };\n    this.bibtex = function () {\n      while (this.matchAt()) {\n        var d = this.directive().toUpperCase();\n        this.match(\"{\");\n        if (d == \"@STRING\") {\n          this.string();\n        } else if (d == \"@PREAMBLE\") {\n          this.preamble();\n        } else if (d == \"@COMMENT\") {\n          this.comment();\n        } else {\n          this.entry(d);\n        }\n        this.match(\"}\");\n      }\n    };\n  }\n  exports.toJSON = function (input) {\n    var b = new BibtexParser();\n    b.setInput(input);\n    b.bibtex();\n    return b.entries;\n  };\n})(typeof exports === 'undefined' ? this['bibtexParse'] = {} : exports);\n\n/* end bibtexParse */","map":{"version":3,"names":["exports","BibtexParser","pos","input","entries","Array","strings","JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC","currentEntry","setInput","t","getEntries","isWhitespace","s","match","skipWhitespace","substring","length","tryMatch","matchAt","value_braces","bracecount","start","end","value_quotes","single_value","k","key","toUpperCase","value","values","push","join","key_equals_value","val","key_value_list","kv","entry_body","d","directive","string","preamble","comment","entry","bibtex","toJSON","b"],"sources":["/home/spencer/Personal/Bibtex-web-database-master/client/node_modules/bibtex-parser-js/bibtexParse.js"],"sourcesContent":["/* start bibtexParse 0.0.2 */\n\n// Original work by Henrik Muehe (c) 2010\n//\n// CommonJS port by Mikola Lysenko 2013\n//\n// Port to Browser lib by ORCID / RCPETERS\n//\n// Issues:\n//  no comment handling within strings\n//  no string concatenation\n//  no variable values yet\n// Grammar implemented here:\n//  bibtex -> (string | preamble | comment | entry)*;\n//  string -> '@STRING' '{' key_equals_value '}';\n//  preamble -> '@PREAMBLE' '{' value '}';\n//  comment -> '@COMMENT' '{' value '}';\n//  entry -> '@' key '{' key ',' key_value_list '}';\n//  key_value_list -> key_equals_value (',' key_equals_value)*;\n//  key_equals_value -> key '=' value;\n//  value -> value_quotes | value_braces | key;\n//  value_quotes -> '\"' .*? '\"'; // not quite\n//  value_braces -> '{' .*? '\"'; // not quite\n(function (exports) {\n\n    function BibtexParser() {\n        this.pos = 0;\n        this.input = \"\";\n\n        this.entries = new Array();\n        this.strings = {\n            JAN: \"January\",\n            FEB: \"February\",\n            MAR: \"March\",\n            APR: \"April\",\n            MAY: \"May\",\n            JUN: \"June\",\n            JUL: \"July\",\n            AUG: \"August\",\n            SEP: \"September\",\n            OCT: \"October\",\n            NOV: \"November\",\n            DEC: \"December\"\n        };\n        \n        this.currentEntry = \"\";\n\n\n        this.setInput = function (t) {\n            this.input = t;\n        }\n\n        this.getEntries = function () {\n            return this.entries;\n        }\n\n        this.isWhitespace = function (s) {\n            return (s == ' ' || s == '\\r' || s == '\\t' || s == '\\n');\n        }\n\n        this.match = function (s) {\n            this.skipWhitespace();\n            if (this.input.substring(this.pos, this.pos + s.length) == s) {\n                this.pos += s.length;\n            } else {\n                throw \"Token mismatch, expected \" + s + \", found \" + this.input.substring(this.pos);\n            }\n            this.skipWhitespace();\n        }\n\n        this.tryMatch = function (s) {\n            this.skipWhitespace();\n            if (this.input.substring(this.pos, this.pos + s.length) == s) {\n                return true;\n            } else {\n                return false;\n            }\n            this.skipWhitespace();\n        }\n        \n        /* when search for a match  all text can be ignored, not just white space */\n\t\tthis.matchAt = function () {\n            while (this.input.length > this.pos && this.input[this.pos] != '@') {\n                this.pos++;\n            }\n\n            if (this.input[this.pos] == '@') {\n                return true;\n            } \n            return false;\n        }\n\n\n        this.skipWhitespace = function () {\n            while (this.isWhitespace(this.input[this.pos])) {\n                this.pos++;\n            }\n            if (this.input[this.pos] == \"%\") {\n                while (this.input[this.pos] != \"\\n\") {\n                    this.pos++;\n                }\n                this.skipWhitespace();\n            }\n        }\n\n        this.value_braces = function () {\n            var bracecount = 0;\n            this.match(\"{\");\n            var start = this.pos;\n            while (true) {\n                if (this.input[this.pos] == '}' && this.input[this.pos - 1] != '\\\\') {\n                    if (bracecount > 0) {\n                        bracecount--;\n                    } else {\n                        var end = this.pos;\n                        this.match(\"}\");\n                        return this.input.substring(start, end);\n                    }\n                } else if (this.input[this.pos] == '{') {\n                    bracecount++;\n                } else if (this.pos == this.input.length - 1) {\n                    throw \"Unterminated value\";\n                }\n                this.pos++;\n            }\n        }\n\n        this.value_quotes = function () {\n            this.match('\"');\n            var start = this.pos;\n            while (true) {\n                if (this.input[this.pos] == '\"' && this.input[this.pos - 1] != '\\\\') {\n                    var end = this.pos;\n                    this.match('\"');\n                    return this.input.substring(start, end);\n                } else if (this.pos == this.input.length - 1) {\n                    throw \"Unterminated value:\" + this.input.substring(start);\n                }\n                this.pos++;\n            }\n        }\n\n        this.single_value = function () {\n            var start = this.pos;\n            if (this.tryMatch(\"{\")) {\n                return this.value_braces();\n            } else if (this.tryMatch('\"')) {\n                return this.value_quotes();\n            } else {\n                var k = this.key();\n                if (this.strings[k.toUpperCase()]) {\n                    return this.strings[k];\n                } else if (k.match(\"^[0-9]+$\")) {\n                    return k;\n                } else {\n                    throw \"Value expected:\" + this.input.substring(start);\n                }\n            }\n        }\n\n        this.value = function () {\n            var values = [];\n            values.push(this.single_value());\n            while (this.tryMatch(\"#\")) {\n                this.match(\"#\");\n                values.push(this.single_value());\n            }\n            return values.join(\"\");\n        }\n\n        this.key = function () {\n            var start = this.pos;\n            while (true) {\n                if (this.pos == this.input.length) {\n                    throw \"Runaway key\";\n                }\n\n                if (this.input[this.pos].match(\"[a-zA-Z0-9_:\\\\./-]\")) {\n                    this.pos++\n                } else {\n                    return this.input.substring(start, this.pos).toUpperCase();\n                }\n            }\n        }\n\n        this.key_equals_value = function () {\n            var key = this.key();\n            if (this.tryMatch(\"=\")) {\n                this.match(\"=\");\n                var val = this.value();\n                return [key, val];\n            } else {\n                throw \"... = value expected, equals sign missing:\" + this.input.substring(this.pos);\n            }\n        }\n\n        this.key_value_list = function () {\n            var kv = this.key_equals_value();\n            this.currentEntry['entryTags'] = {};\n            this.currentEntry['entryTags'][kv[0]] = kv[1];\n            while (this.tryMatch(\",\")) {\n                this.match(\",\");\n                // fixes problems with commas at the end of a list\n                if (this.tryMatch(\"}\")) {\n                    break;\n                }\n                kv = this.key_equals_value();\n                this.currentEntry['entryTags'][kv[0]] = kv[1];\n            }\n        }\n\n        this.entry_body = function (d) {\n            this.currentEntry = {}; \n            this.currentEntry['citationKey'] = this.key();\n            this.currentEntry['entryType'] = d.substring(1);\n            this.match(\",\");\n            this.key_value_list();\n            this.entries.push(this.currentEntry);\n        }\n\n        this.directive = function () {\n            this.match(\"@\");\n            return \"@\" + this.key();\n        }\n\n        this.string = function () {\n            var kv = this.key_equals_value();\n            this.strings[kv[0].toUpperCase()] = kv[1];\n        }\n\n        this.preamble = function () {\n            this.value();\n        }\n\n        this.comment = function () {\n        \t//this.matchAt();\n            this.single_value();\n        }\n\n        this.entry = function (d) {\n            this.entry_body(d);\n        }\n\n        this.bibtex = function () {\n            while (this.matchAt()) {\n                var d = this.directive().toUpperCase();\n                this.match(\"{\");\n                if (d == \"@STRING\") {\n                    this.string();\n                } else if (d == \"@PREAMBLE\") {\n                    this.preamble();\n                } else if (d == \"@COMMENT\") {\n                \tthis.comment();\n                } else {\n                    this.entry(d);\n                }\n                this.match(\"}\");\n            }\n        }\n    }\n\n    exports.toJSON = function (input) {\n        var b = new BibtexParser();\n        b.setInput(input);\n        b.bibtex();\n        return b.entries\n    };\n\n\n})(typeof exports === 'undefined' ? this['bibtexParse'] = {} : exports);\n\n/* end bibtexParse */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}